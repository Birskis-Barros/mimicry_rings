f_oc<- f_oc*M_mod #tenho que multiplicar minha matriz criada para que bata com a de ocorrência.
#ab <- matrix(NA, ncol=50, nrow=50)
#abund.total <- apply(f_oc,2,sum)
#for(i in 1:50){
#  for(j in 1:50){
#    ab[i,j] <- sum((f_oc[i,]*f_oc[j,])/abund.total)
# }
#}
#ab <- ab/rowSums(ab)
#Otimizando a abundancia
ab <- f_oc
ab <- as.matrix(ab)
ab <- prop.table(ab,2) #padronizando pela coluna
f_oc <- as.matrix(f_oc)
ab <- ab%*%t(f_oc)
ab <- prop.table(ab,1) #padronizando a matriz final pela linha
## Construindo a matriz de matching fenotípico
# Criano uma matriz vazia:
dif.z <- matrix(nrow=50,ncol=50)
# Preenchendo a matriz m com a diferença dos valores de Z (criado acima) ao quadrado
for (i in 1:50)
{
for (j in 1:50)
{
dif.z[i,j] <- (z[i]-z[j])^2
}
}
# Calculando o efeito do matching
mat <- exp(-alfa*dif.z)
#diag(mat) <- 0 #tirando o efeito da espécie sobre ela mesma.
#Analise de sensibilidade: ao inves de todas sp, só aquelas que co-ocorrem
A <- ifelse(ab, 1, 0)
mat <- mat*A
#Padronizando a matriz do matching
mat <- mat/rowSums(mat)
## Construindo a matriz Q:
Q.abund <- ab*mat
# Padronizando
Q.abund <- Q.abund/rowSums(Q.abund)
### Calculando o fenótipo final depois de várias gerações:
## Pra cada novo z eu preciso recalcular a matriz Q.
# Para a matriz modular:
size <- c(1:1000)
fenotipo <- matrix(nrow = length(size),ncol=50)
for (t in 1:1000)
{
id <- t
z <- z-H%*%z + (H%*%P)%*%teta.sp + H%*%(I-P)%*%(Q.abund)%*%z
for (i in 1:50)
{
for (j in 1:50)
{
dif.z[i,j] <- (z[i]-z[j])^2
}
}
mat <- exp(-alfa*dif.z)
#diag(mat) <- 0
mat <- mat*A #analise de sensibilidade: ao inves de todas sp, só aquelas que co-ocorrem
mat <- mat/rowSums(mat)
Q.abund <- ab*mat
Q.abund <- Q.abund/rowSums(Q.abund)
fenotipo[t,] <- c(z)
}
z.sg.10 <- z
result[w,1] = var(z.sg.10)
result[w,2] = var(rep(teta,each=5))
}
View(result)
for (w in 1001:1500){
M_mod <- M
sg <- sample(1:50, 5) #number of supergeneralists in the system
#M_mod[sg,] <- 1 # Para apenas um supergeneralista
#Para mais de um supergeneralist
for(a in 1:5){
M_mod[sg[a],] <- 1
}
## Criando o vetor teta
teta <- runif(10,0,1)
## Calculando o teta de cada espécie (média dos tetas dos habitats que ocorrem)
teta.sp <- numeric(50)
for (i in 1:S)
{
teta.sp[i] <- rowSums(M_mod[i,]*teta)/rowSums(M_mod)[i]
}
## Variáveis
z <-  runif(50,0,1)
z <- as.vector(z)
z0 <- z
#### Construindo as matrizes
H  <- diag(h,50,50)
P <-  diag(p,50,50)
I <- diag(1,50,50)
### Calculando a abundância/frequencia das espécies
# Minha matriz de frequencia é de 0 a 10 (arbitrário)
f_oc <- matrix((sample(c(1:10), 500, replace=T)), nrow=50, ncol=10)
f_oc<- f_oc*M_mod #tenho que multiplicar minha matriz criada para que bata com a de ocorrência.
#ab <- matrix(NA, ncol=50, nrow=50)
#abund.total <- apply(f_oc,2,sum)
#for(i in 1:50){
#  for(j in 1:50){
#    ab[i,j] <- sum((f_oc[i,]*f_oc[j,])/abund.total)
# }
#}
#ab <- ab/rowSums(ab)
#Otimizando a abundancia
ab <- f_oc
ab <- as.matrix(ab)
ab <- prop.table(ab,2) #padronizando pela coluna
f_oc <- as.matrix(f_oc)
ab <- ab%*%t(f_oc)
ab <- prop.table(ab,1) #padronizando a matriz final pela linha
## Construindo a matriz de matching fenotípico
# Criano uma matriz vazia:
dif.z <- matrix(nrow=50,ncol=50)
# Preenchendo a matriz m com a diferença dos valores de Z (criado acima) ao quadrado
for (i in 1:50)
{
for (j in 1:50)
{
dif.z[i,j] <- (z[i]-z[j])^2
}
}
# Calculando o efeito do matching
mat <- exp(-alfa*dif.z)
#diag(mat) <- 0 #tirando o efeito da espécie sobre ela mesma.
#Analise de sensibilidade: ao inves de todas sp, só aquelas que co-ocorrem
A <- ifelse(ab, 1, 0)
mat <- mat*A
#Padronizando a matriz do matching
mat <- mat/rowSums(mat)
## Construindo a matriz Q:
Q.abund <- ab*mat
# Padronizando
Q.abund <- Q.abund/rowSums(Q.abund)
### Calculando o fenótipo final depois de várias gerações:
## Pra cada novo z eu preciso recalcular a matriz Q.
# Para a matriz modular:
size <- c(1:1000)
fenotipo <- matrix(nrow = length(size),ncol=50)
for (t in 1:1000)
{
id <- t
z <- z-H%*%z + (H%*%P)%*%teta.sp + H%*%(I-P)%*%(Q.abund)%*%z
for (i in 1:50)
{
for (j in 1:50)
{
dif.z[i,j] <- (z[i]-z[j])^2
}
}
mat <- exp(-alfa*dif.z)
#diag(mat) <- 0
mat <- mat*A #analise de sensibilidade: ao inves de todas sp, só aquelas que co-ocorrem
mat <- mat/rowSums(mat)
Q.abund <- ab*mat
Q.abund <- Q.abund/rowSums(Q.abund)
fenotipo[t,] <- c(z)
}
z.sg.10 <- z
result[w,1] = var(z.sg.10)
result[w,2] = var(rep(teta,each=5))
}
View(result)
safe = result
result[,1] = as.numeric(result[,1])
result[,2] = as.numeric(result[,2])
View(result)
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point()
result = as.data.frame(result)
View(result)
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point()
View(result)
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point()
ggplot(result, aes(var_z, var_theta,
color = cenarios)) +
geom_point() + theme_classic()
View(result)
plot(result$var_z ~ result$var_theta)
setwd("/Users/irinabb/Desktop/")
save(result,file="data_var.Rda")
write.csv(result,'data_var.csv')
result[,2] = 1000*(result[,2])
class(result$var_z)
result$var_z <- as.numeric(result$var_z)
View(result)
View(safe)
a = c(1,2,3)
class(a)
result=safe
class(result$var_z)
result = as.data.frame(result)
class(result$var_z)
getwd()
testando = read.csv("data_var.csv", header=T)
View(testando)
class(testando)
class(testando$var_z)
result = testando
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
#scale_colour_brewer(palette="Pastel1") +
theme_classic()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
#scale_colour_brewer(palette="Pastel1") +
theme_classic()
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18))
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
#scale_colour_brewer(palette="Pastel1") +
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18)) +
theme_classic()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
geom_abline(intercept=1, slope=1) +
#scale_colour_brewer(palette="Pastel1") +
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18)) +
theme(label.text)
theme_classic()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
geom_abline(slope=1) +
#scale_colour_brewer(palette="Pastel1") +
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18)) +
theme(label.text)
theme_classic()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
geom_abline(intercept=0, slope=1)
#scale_colour_brewer(palette="Pastel1") +
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18)) +
theme(label.text)
theme_classic()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
geom_abline(intercept=0, slope=1, color="blue")
#scale_colour_brewer(palette="Pastel1") +
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18)) +
theme(label.text)
theme_classic()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
geom_abline(intercept=0, slope=1, color="blue")
#scale_colour_brewer(palette="Pastel1") +
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18)) +
theme_classic()
ggplot(data=result, aes(x=result$var_theta , y=result$var_z, color=factor(result$cenarios))) +
geom_point() +
geom_abline(intercept=0, slope=1, color="blue") +
theme_classic() +
#scale_colour_brewer(palette="Pastel1") +
labs(x = "Var Theta", y="Var Zfinal", size=14) +
theme(axis.title=element_text(size=18)) +
theme(axis.text.x = element_text(vjust=1,size=18)) +
theme(axis.text.y = element_text(vjust=1,size=18))
# Importanto as matrizes de ocorrência (começando sempre com uma modular) de um arquivo txt
M_mod  <- read.table(file="MOD.txt", header=T, row.names=1)
setwd("/Users/irina/Documents/Mestrado/R/Planilhas/Matriz Ocorrencia/")
setwd("/Users/irinabb/Dropbox/Mestrado/R/Planilhas/Matriz Ocorrencia/")
# Importanto as matrizes de ocorrência (começando sempre com uma modular) de um arquivo txt
M_mod  <- read.table(file="MOD.txt", header=T, row.names=1)
setwd("/Users/irinabb/Dropbox/Mestrado/Am_Nat/codigos_git/mimicry_rings/")
R/Planilhas/Matriz Ocorrencia/")
# Importanto as matrizes de ocorrência (começando sempre com uma modular) de um arquivo txt
M_mod  <- read.table(file="MOD.txt", header=T, row.names=1)
write.csv(M_mod, file="Matrix_mod.csv")
# Parâmetros
S <- 50 #número de espécies
n <- 10 #número de habitats
h <- 0.25 #herdabilidade
p <- 0.3 #força de seleção de habitat
alfa <- 2
#Sorteando 10 espécies entre as 50 para serem Super-Generalista:
M_mod <- M
sg <- sample(1:50, 5) #number of supergeneralists in the system
#M_mod[sg,] <- 1 # Para apenas um supergeneralista
#Para mais de um supergeneralist
for(a in 1:5){
M_mod[sg[a],] <- 1
}
## Criando o vetor teta
teta <- runif(10,0,1)
## Calculando o teta de cada espécie (média dos tetas dos habitats que ocorrem)
teta.sp <- numeric(50)
for (i in 1:S)
{
teta.sp[i] <- rowSums(M_mod[i,]*teta)/rowSums(M_mod)[i]
}
## Variáveis
z <-  runif(50,0,1)
z <- as.vector(z)
z0 <- z
#### Construindo as matrizes
H  <- diag(h,50,50)
P <-  diag(p,50,50)
I <- diag(1,50,50)
### Calculando a abundância/frequencia das espécies
# Minha matriz de frequencia é de 0 a 10 (arbitrário)
f_oc <- matrix((sample(c(1:10), 500, replace=T)), nrow=50, ncol=10)
f_oc<- f_oc*M_mod #tenho que multiplicar minha matriz criada para que bata com a de ocorrência.
#ab <- matrix(NA, ncol=50, nrow=50)
#abund.total <- apply(f_oc,2,sum)
#for(i in 1:50){
#  for(j in 1:50){
#    ab[i,j] <- sum((f_oc[i,]*f_oc[j,])/abund.total)
# }
#}
#ab <- ab/rowSums(ab)
#Otimizando a abundancia
ab <- f_oc
ab <- as.matrix(ab)
ab <- prop.table(ab,2) #padronizando pela coluna
f_oc <- as.matrix(f_oc)
ab <- ab%*%t(f_oc)
ab <- prop.table(ab,1) #padronizando a matriz final pela linha
## Construindo a matriz de matching fenotípico
# Criano uma matriz vazia:
dif.z <- matrix(nrow=50,ncol=50)
# Preenchendo a matriz m com a diferença dos valores de Z (criado acima) ao quadrado
for (i in 1:50)
{
for (j in 1:50)
{
dif.z[i,j] <- (z[i]-z[j])^2
}
}
# Calculando o efeito do matching
mat <- exp(-alfa*dif.z)
#diag(mat) <- 0 #tirando o efeito da espécie sobre ela mesma.
#Analise de sensibilidade: ao inves de todas sp, só aquelas que co-ocorrem
A <- ifelse(ab, 1, 0)
mat <- mat*A
#Padronizando a matriz do matching
mat <- mat/rowSums(mat)
## Construindo a matriz Q:
Q.abund <- ab*mat
# Padronizando
Q.abund <- Q.abund/rowSums(Q.abund)
### Calculando o fenótipo final depois de várias gerações:
## Pra cada novo z eu preciso recalcular a matriz Q.
# Para a matriz modular:
size <- c(1:1000)
fenotipo <- matrix(nrow = length(size),ncol=50)
for (t in 1:1000)
{
id <- t
z <- z-H%*%z + (H%*%P)%*%teta.sp + H%*%(I-P)%*%(Q.abund)%*%z
for (i in 1:50)
{
for (j in 1:50)
{
dif.z[i,j] <- (z[i]-z[j])^2
}
}
mat <- exp(-alfa*dif.z)
#diag(mat) <- 0
mat <- mat*A #analise de sensibilidade: ao inves de todas sp, só aquelas que co-ocorrem
mat <- mat/rowSums(mat)
Q.abund <- ab*mat
Q.abund <- Q.abund/rowSums(Q.abund)
fenotipo[t,] <- c(z)
}
z.sg.10 <- z
}
##Fazendo o gráfico
gen <- cbind(z.sg.10, teta.sp)
fenotipo.df = data.frame(fenotipo[1:100,])
names(fenotipo.df) <- paste(rep(LETTERS[1:10], each = 5), 1:5, sep = "_")
m_fen = melt(fenotipo.df)
m_fen$gen = rep(1:100, 5*10)
m_fen$especies <- rep(seq(from=1, to=50), each=100)
m_fen$teta <- rep(teta.sp, each=100)
m_fen = separate(m_fen, variable, c("ambiente", "especie_habit"))
for(a in 1:5){
m_fen$ambiente[which(m_fen$especies==sg[a])] <- "SG"
}
teta.df <- data.frame(teta=unique(teta.sp))
teta.df$ambiente <- c(LETTERS[1:10], "SG")
ggplot(m_fen, aes(gen, value,
group = interaction(ambiente, especies),
color = ambiente)) +
geom_line() + theme_classic() +
geom_hline(data = teta.df, aes(yintercept = teta, color = ambiente), linetype = 2)+
theme(axis.text = element_text(size = 12))
ggsave("/Users/mac/Documents/Mestrado/Dissertacao/art_figuras_pdf/Novas/art1_fig3B.pdf", width=5.92, height=4.49)
getwd()
write.csv(M_mod, file="Matrix_mod.csv")
help(getwd)
#Importing the perfect modular matrix
M_mod  <- read.csv(file="Matrix_mod.csv", header=T, row.names=1)
View(M_mod)
setwd("/Users/irinabb/Dropbox//Mestrado/R/Planilhas/Matriz Ocorrencia/")
# Importanto as matrizes de ocorrência (SG ou MOD) de um arquivo txt
M_mod  <- read.table(file="MOD.txt", header=T, row.names=1)
write.csv(M_mod, file="Matrix_mod.csv")
#Changing my directory
setwd("/Users/irinabb/Dropbox/Mestrado/Am_Nat/codigos_git/mimicry_rings/")
#Importing the perfect modular matrix
M_mod  <- read.csv(file="Matrix_mod.csv", header=T, row.names=1)
View(M_mod)
#Importing the perfect modular matrix
M_mod  <- read.csv(file="Matrix_mod.csv", header=T)
View(M_mod)
setwd("/Users/irinabb/Dropbox//Mestrado/R/Planilhas/Matriz Ocorrencia/")
# Importanto as matrizes de ocorrência (SG ou MOD) de um arquivo txt
M_mod  <- read.table(file="MOD.txt", header=T, row.names=1)
View(M_mod)
write.csv(M_mod, file="Matrix_mod.csv")
#Changing my directory
setwd("/Users/irinabb/Dropbox/Mestrado/Am_Nat/codigos_git/mimicry_rings/")
#Importing the perfect modular matrix
M_mod  <- read.csv(file="Matrix_mod.csv", header=T)
View(M_mod)
#Changing my directory
setwd("/Users/irinabb/Dropbox/Mestrado/Am_Nat/codigos_git/mimicry_rings/")
#Importing the perfect modular matrix
M_mod  <- read.table(file="MOD.txt", header=T, row.names=1)
View(M_mod)
M <- M_mod
teta <- runif(10,0,1)
teta
rep(teta, each=5)
gen <- cbind(z.sg.10, teta.sp)
fenotipo.df = data.frame(fenotipo[1:100,])
names(fenotipo.df) <- paste(rep(LETTERS[1:10], each = 5), 1:5, sep = "_")
m_fen = melt(fenotipo.df)
m_fen$gen = rep(1:100, 5*10)
m_fen$especies <- rep(seq(from=1, to=50), each=100)
m_fen$teta <- rep(teta.sp, each=100)
View(m_fen)
m_fen = separate(m_fen, variable, c("habitat", "species_habitat"))
View(m_fen)
for(a in 1:5){
m_fen$ambiente[which(m_fen$especies==sg[a])] <- "SG"
}
gen <- cbind(z.sg.10, teta.sp)
fenotipo.df = data.frame(fenotipo[1:100,])
names(fenotipo.df) <- paste(rep(LETTERS[1:10], each = 5), 1:5, sep = "_")
m_fen = melt(fenotipo.df)
m_fen$gen = rep(1:100, 5*10)
m_fen$species <- rep(seq(from=1, to=50), each=100)
m_fen$teta <- rep(teta.sp, each=100)
m_fen = separate(m_fen, variable, c("habitat", "species_habitat"))
for(a in 1:5){
m_fen$habitat[which(m_fen$species==sg[a])] <- "SG"
}
teta.df <- data.frame(teta=unique(teta.sp))
teta.df$habitat <- c(LETTERS[1:10], "SG")
gen <- cbind(z.sg.10, teta.sp)
fenotipo.df = data.frame(fenotipo[1:100,])
names(fenotipo.df) <- paste(rep(LETTERS[1:10], each = 5), 1:5, sep = "_")
m_fen = melt(fenotipo.df)
m_fen$gen = rep(1:100, 5*10)
m_fen$species <- rep(seq(from=1, to=50), each=100)
m_fen$teta <- rep(teta.sp, each=100)
m_fen = separate(m_fen, variable, c("habitat", "species_habitat"))
for(a in 1:5){
m_fen$habitat[which(m_fen$species==sg[a])] <- "SG"
}
teta.df <- data.frame(teta=unique(teta.sp))
teta.df$habitat <- c(LETTERS[1:10], "SG")
ggplot(m_fen, aes(gen, value,
group = interaction(habitat, species),
color = habitats)) +
geom_line() + theme_classic() +
geom_hline(data = teta.df, aes(yintercept = teta, color = habitat), linetype = 2)+
theme(axis.text = element_text(size = 12))
gen <- cbind(z.sg.10, teta.sp)
fenotipo.df = data.frame(fenotipo[1:100,])
names(fenotipo.df) <- paste(rep(LETTERS[1:10], each = 5), 1:5, sep = "_")
m_fen = melt(fenotipo.df)
m_fen$gen = rep(1:100, 5*10)
m_fen$species <- rep(seq(from=1, to=50), each=100)
m_fen$teta <- rep(teta.sp, each=100)
m_fen = separate(m_fen, variable, c("habitat", "species_habitat"))
for(a in 1:5){
m_fen$habitat[which(m_fen$species==sg[a])] <- "SG"
}
teta.df <- data.frame(teta=unique(teta.sp))
teta.df$habitat <- c(LETTERS[1:10], "SG")
ggplot(m_fen, aes(gen, value,
group = interaction(habitat, species),
color = habitat)) +
geom_line() + theme_classic() +
geom_hline(data = teta.df, aes(yintercept = teta, color = habitat), linetype = 2)+
theme(axis.text = element_text(size = 12))
